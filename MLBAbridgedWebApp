#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(DT)
library(shinyFeedback)
library(dplyr)

isBuilding <- FALSE
getBuiltLineups() # assigns dfs blList1, blList2, blList3 and builtLineups
getPlayerPool() # assigns df playerPoolSaved
getts()
getps()

# Define UI for application that draws a histogram
ui <- function(request){
  
  fluidPage(
    titlePanel("Lineup Builder"),
    actionButton("getData", "Pull Projections from API"),
    actionButton("save", "Save Player Pool"),
    actionButton("clearPool", "Clear Pool"),
    actionButton("build", "Build New Lineups"),
    actionButton("lineupEditor", "Edit DKEntries with Last Build"),
    
    tabsetPanel(
      tabPanel(
        "Projections",
        mainPanel(DT::dataTableOutput("projections"))
      ),
      tabPanel("Parameters",
               numericInput("build_lineups", "Number of Lineups",  20),
               selectInput("bans", "Bans", c(oprojections$Name, unique(oprojections$Team)), multiple=TRUE),
               selectInput("locks", "Locks", c(oprojections$Name, unique(oprojections$Team)), multiple=TRUE),
               sliderInput("min_salary", "Min Salary", value = 47000, min = 40000, max=50000),
               checkboxInput("limit_player_pool", "Limit player pool to selection?", value=FALSE)
               
            
      ),
      tabPanel("Team Summary",
               mainPanel(DT::dataTableOutput("teamSummary"))
      ),
      tabPanel("Pitcher Summary",
               mainPanel(DT::dataTableOutput("pitcherSummary"))
      ),
      tabPanel("My Player Pool",
               mainPanel(DT::dataTableOutput("playerPool"))
      ),
      tabPanel("Lineups",
              fluidRow(
                column(3, uiOutput("lineups1")),
                column(3, uiOutput("lineups2")),
                column(3, uiOutput("lineups3")),
                column(3, uiOutput("lineups4"))
              )
      ),
      tabPanel("Ownership",
               mainPanel(DT::dataTableOutput("Ownership"))
      ),
      tabPanel("Pitcher Lines",
               mainPanel(DT::dataTableOutput("pitcherLines"))
               ),
      tabPanel("Batter Lines",
               mainPanel(DT::dataTableOutput("batterLines"))
               ),
      tabPanel("Review Last Night",
               mainPanel(
                 textInput("contestID", "Contest ID #:", value="148133603"),
                 actionButton("compare", "Compare Build to Last Night"),
                 textOutput("comparison"),
                 DT::dataTableOutput("bestLineups")
               )
       )
  )

)
}

# Define server logic required to draw a histogram
server <- function(input, output, session) {
  
  ##### define functions for server #####
{
  
  

  addLineupsToTab <- function(c){ 
    
    thisList <- get(sub(" ", "",paste0("blList", c)))
    plot_output_list <- list()
    output[[sub(" ","",paste0("lineups",c))]] <- renderUI({
      for(i in 1:length(thisList)){
        tablename <- paste("tablename", c, i, sep = "")
        plot_output_list[[i]] <- tableOutput(tablename)
      }
      
      do.call(tagList, plot_output_list)
    })
    
    for (i in 1:length(thisList)) {
      local({
        tablename <- paste("tablename", c, i, sep = "")
        output[[tablename]] <- renderTable({
          thisList[[i]]
        })
      })
    }
    
  }
  
  renderTeamSummary <- function(output, teamSummary){
    #cat("teamsummary\n")
    output$teamSummary <- DT::renderDataTable(
      if(tsSaved[[1, 2]] == "cleared"){
        datatable( data = teamSummary(),editable = TRUE, filter="top")
      }else{
        datatable(data=teamSummary()
                  ,editable = TRUE
                  ,selection= list(mode='multiple', selected = c(1:nrow(teamSummary()))[teamSummary()$Team %in% tsSaved$Team], target = 'row', selectable = TRUE)
                  
        )
      }
    )
  }
  
  renderPitcherSummary <- function(output, pitcherSummary){
    #cat("pitchsummary\n")
    
    output$pitcherSummary <- DT::renderDataTable(
      if(psSaved[[1, 2]] == "cleared"){
        datatable( data = pitcherSummary(),editable = TRUE, filter="top")
      }else{
        datatable(data=pitcherSummary()
                  ,editable = TRUE
                  ,selection= list(mode='multiple', selected = c(1:nrow(pitcherSummary()))[pitcherSummary()$Name %in% psSaved$Name], target = 'row', selectable = TRUE)
                  
        )
      }
    )
  }
  
  renderProjections <- function(projections, teamSummary, pitcherSummary){
    #cat("hello")
    teamSelects <- c(1:nrow(projections()))[(projections()$Team %in% teamSummary()[input$teamSummary_rows_selected,]$Team) & !(projections()$Position == "P")]
    #cat('1')
    #omitPitchers <- c(1:nrow(projections()))[projections()$Position == "P"]
    #cat('2')
    #teamSelects <- setdiff(teamSelects, omitPitchers)
    #cat('3')
    pitcherSelects <- c(1:nrow(projections()))[projections()$Name %in% pitcherSummary()[input$pitcherSummary_rows_selected,]$Name]
   #cat('4')
    dtSelect <- unique(c(teamSelects,pitcherSelects))
    #cat('5')
    if(length(dtSelect)==0) {
      dtSelect <- NULL
    }
    #cat('6')
    if(playerPoolSaved[[1, 2]] == "cleared"){
      #cat('cleared')
      thisDT <- datatable( data = projections(),editable = TRUE, filter="top"
                           , selection=list(mode='multiple',selected = dtSelect, target='row', selectable=TRUE))
    }else{ #cat('else')
      thisDT <- datatable( data = projections(),
                           editable = TRUE
                           , filter="top"
                           ,selection= list(mode='multiple'
                                            , selected = unique(
                                              c(c(1:nrow(projections()))[projections()$ID %in% playerPoolSaved$ID], dtSelect)
                                            )
                                            , target = 'row', selectable = TRUE)
      )
    }#)
    return(thisDT)
  }
  
  renderOwnership <- function(output){
    output$Ownership <- DT::renderDT(datatable(data=ownership))
  }
  
  renderBL <- function(output){
    output$batterLines <- DT::renderDT(datatable(data=batter_lines, editable=TRUE))
  }
  
  renderPL <- function(output){
    output$pitcherLines <- DT::renderDT(datatable(data=pitcher_lines, editable=TRUE))
  }
  
  renderPlayerPool <- function(output, playerPool){
    output$playerPool <- DT::renderDataTable(
      playerPool()
    )
  }
  
  comparison <- function(output){
    contestData <- getContestData(input$contestID)
    View(contestData)
    cost <- contestData[[1]]
    revenue <- contestData[[2]]
    roi <- contestData[[3]]
    best_lineups <- contestData[[4]]
    output$comparison <- renderText(paste("cost: ",cost,"\nrevenue: ", revenue, "\nroi: ", roi, sep=""))
    output$bestLineups <- DT::renderDT(datatable(data=best_lineups))
  }
  
  provideFeedback <- function(msg, id = NULL) {
      showNotification(msg, id = id, duration = NULL, closeButton = FALSE)
    }
    
}
    output$projections <-  DT::renderDT(renderProjections(projections, teamSummary, pitcherSummary))

  # Reactive Expression caches this result for use throughout server function; more computationally efficient and easier to debug
  projections <- reactive({oprojections})
  teamSummary <- reactive({team_summary}) 
  pitcherSummary <- reactive({pitcher_summary})
  Ownership <- reactive({ownership})
  playerPool <- reactive({unique(as.data.frame(rbind(projections()[input$projections_rows_selected,])))})
  pitcherLines <- reactive({pitcher_lines})
  batterLines <- reactive({batter_lines})
  contestID <- reactive({})
  textOutput <- reactive({})
  bestLineups <- reactive({best_lineups})
  # blocks <- reactive({input$locks})
  # bbans <- reactive({input$bans})
  # bminSal <- reactive({input$min_salary})
  # bnumLineups <- reactive({input$build_lineups})
  
  ##### Render tabs to start #####

  output$projections <-  DT::renderDT(renderProjections(projections, teamSummary, pitcherSummary))
  
  renderOwnership(output)
  renderPlayerPool(output, playerPool)
  renderTeamSummary(output, teamSummary)
  renderPitcherSummary(output, pitcherSummary)
  
  renderBL(output)
  renderPL(output)
  
  observeEvent(input$compare, {
    id <- provideFeedback("Analyzing results...")
    on.exit(removeNotification(id), add = TRUE)
    Sys.sleep(1)
    comparison(output)
  })
  
  
  observeEvent(input$lineupEditor, {
    id <- provideFeedback("Editing lineups...")
    on.exit(removeNotification(id), add = TRUE)
    Sys.sleep(1)
    lineupEditor()
  })
  
  observeEvent(input$getData,{
    id <- provideFeedback("Updating data...")
    on.exit(removeNotification(id), add = TRUE)
    Sys.sleep(1)
    
    getData()
  })
  
  observeEvent(input$build, {
    id <- provideFeedback("Building new lineups...")
    on.exit(removeNotification(id), add = TRUE)
    Sys.sleep(1)
    if(input$limit_player_pool) playerPool <- projections()[input$projections_rows_selected,]$Name else playerPool <-projections()$Name
   
    build_lineups <- input$build_lineups
    
    bans <- input$bans
    #cat(as.numeric("DJ LeMahieu" %in% bbans()))
    locks <- input$locks
    #five_stacks <- teamSummary()[input$teamSummary_rows_selected,]$Team
    min_salary <- input$min_salary
    
    processing(build_lineups, oprojections, c_strength, b1_strength, b2_strength, b3_strength, ss_strength, of_strength, bans, locks, batter_lines, pitcher_lines, playerPool)
    #View(poolprojections)
    #write.csv(playerPool(), file = "C:/Users/jorda/OneDrive/Documents/MLB DFS 2023/savedpool.csv")
    getBuiltLineups()
    #write.csv(pitcherSummary()[input$pitcherSummary_rows_selected,], file = "C:/Users/jorda/OneDrive/Documents/MLB DFS 2023/ps.csv")
    #write.csv(teamSummary()[input$teamSummary_rows_selected,], file = "C:/Users/jorda/OneDrive/Documents/MLB DFS 2023/ts.csv")
    addLineupsToTab(1)
    addLineupsToTab(2)
    addLineupsToTab(3)
    addLineupsToTab(4)
  })

  output$feedback <- reactive({"Ready"})
  
  observeEvent(input$save, {
    write.csv(playerPool(), file = "C:/Users/jorda/OneDrive/Documents/MLB DFS 2023/savedpool.csv")
    getPlayerPool()
    write.csv(pitcherSummary()[input$pitcherSummary_rows_selected,], file = "C:/Users/jorda/OneDrive/Documents/MLB DFS 2023/ps.csv")
    getps()
    write.csv(teamSummary()[input$teamSummary_rows_selected,], file = "C:/Users/jorda/OneDrive/Documents/MLB DFS 2023/ts.csv")
    getts()
  })
  
  observeEvent(input$clearPool, {
    initializeSaves()
    getPlayerPool()
    getts()
    getps()
    
    projections <- reactive({oprojections})
    teamSummary <- reactive({team_summary}) 
    pitcherSummary <- reactive({pitcher_summary})
  })

  
  
  ##### Defines the dynamically generated "Lineups" tab #####


    observe({
      addLineupsToTab(1)
      addLineupsToTab(2)
      addLineupsToTab(3)
      addLineupsToTab(4)
  })
  
  
  
  
 
  
  
  ##### edit cells #####

    proxyProj=dataTableProxy('projections')
    observeEvent(input$projections_cell_edit,{
      info=input$projections_cell_edit
      #str(info)
      oprojections<<-editData(oprojections,info)
      replaceData(proxyProj,oprojections)
    })
 
    proxyPitch=dataTableProxy('pitcherSummary')
    observeEvent(input$pitcherSummary_cell_edit,{
      info=input$pitcherSummary_cell_edit
      #str(info)
      pitcher_summary<<-editData(pitcher_summary,info)
      replaceData(proxyPitch,pitcher_summary)
    })
  
    proxyBat=dataTableProxy('batterLines')
    observeEvent(input$batterLines_cell_edit,{
      info=input$batterLines_cell_edit
      #str(info)
      batter_lines<<-editData(batter_lines,info)
      replaceData(proxyBat,batter_lines)
    })
    
    proxyPL=dataTableProxy('pitcherLines')
    observeEvent(input$pitcherLines_cell_edit,{
      info=input$pitcherLines_cell_edit
      #str(info)
      pitcher_lines<<-editData(pitcher_lines,info)
      replaceData(proxyPL,pitcher_lines)
    })

}

# Run the application 
shinyApp(ui = ui, server = server, enableBookmarking = "server")

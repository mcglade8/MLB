}
player_games$fp_ema <- player_games$fp_ema_back
player_games <- player_games %>%
select(-fp_ema_back)
bbg_w_ema <- dplyr::bind_rows(bbg_w_ema, player_games)
}, error=function(e){})
}
### Calculating variance for each batter
list_of_batter_names <- batters_by_game %>%
select(batter_name) %>%
distinct()
temp_batter_name = list_of_batter_names$batter_name[1]
player_games <- batters_by_game %>%
filter(batter_name == temp_batter_name) %>%
mutate(player_var_fp = NA)
player_games$player_var_fp <- var(player_games$game_fp)
bbg_w_var <- player_games
for(i in 2:length(list_of_batter_names$batter_name)){
temp_batter_name = list_of_batter_names$batter_name[i]
player_games <- batters_by_game %>%
filter(batter_name == temp_batter_name)%>%
mutate(player_var_fp = NA)
player_games$player_var_fp <- var(player_games$game_fp)
bbg_w_var <- dplyr::bind_rows(bbg_w_var, player_games)
}
bbg_w_var <- bbg_w_var %>%
filter(!is.na(player_var_fp))
bbg_w_var$inv_var <- 1/bbg_w_var$player_var_fp
### summarise by full date range:
batters_by_period <- batters_by_game %>%
group_by(batter_name) %>%
summarise(av_pts_ab = mean(av_pts_ab), op_av_pts_allow = mean(op_av_pts_allow))
batters_by_game <- batters_by_game %>%
select(-av_pts_ab, -op_av_pts_allow) %>%
merge(batters_by_period, by = "batter_name")
batters_by_game <- batters_by_game %>%
mutate(ugID = paste(batter_name, game_pk))
### get rid of NAs etc.
# do this once everything is in batters_by_game
#
# bbg_w_rhythm <- bbg_w_rhythm %>%
#   filter(!is.na(rhythm_score))
bbg_w_var <- bbg_w_var %>%
filter(!is.na(player_var_fp), player_var_fp != 0) %>%
mutate(ugID = paste(batter_name, game_pk))
bbg_w_var$inv_var <- 1/bbg_w_var$player_var_fp
bbg_w_var <- bbg_w_var  %>%
select(ugID, inv_var)
#
# batters_by_game <- bbg_w_ema %>%
#   filter(!is.na(fp_ema))
bbg_w_ema <- bbg_w_ema %>%
mutate(ugID = paste(batter_name, game_pk)) %>%
select(ugID, fp_ema)
bbg_w_rhythm <- bbg_w_rhythm%>%
mutate(ugID = paste(batter_name, game_pk)) %>%
select(ugID, rhythm_score)
batters_by_game <- batters_by_game %>%
merge(bbg_w_var, by = "ugID", all.x = TRUE) %>%
merge(bbg_w_ema, by = "ugID", all.x = TRUE) %>%
merge(bbg_w_rhythm, by = "ugID", all.x = TRUE)
mad_batter_fps <- batters_by_game %>%
group_by(batter_name)%>%
summarise(mad_fps = mad(game_fp))
batters_by_game <- batters_by_game %>%
merge(mad_batter_fps, by = "batter_name", all.x = TRUE)
batters_by_game <- batters_by_game %>%
filter(!is.na(fp_ema), !is.na(rhythm_score))
p_by_game_preds <- pitchers_by_game %>%
group_by(game_pk) %>%
summarise(pitcher_pred = max(pred))
batters_by_game <- batters_by_game %>%
merge(p_by_game_preds, by = "game_pk") %>%
merge(high_upside_bats, by = "batter_name")
batters_by_game$inv_pitcher_pred <- 1/batters_by_game$pitcher_pred
#
# lm_batter_full_game <- lm(game_fp ~ sqrt(inv_var) * (av_pts_ab + sqrt(exp_batter_earned_fps_by_hand) + big_games)*( fp_ema  + rhythm_score) * (sqrt(exp_pitcher_allowed_fps_by_hand) + inv_pitcher_pred) * park_adjust , data = batters_by_game)
# summary(lm_batter_full_game)
lm_batter_full_game <- lm(game_fp ~ av_pts_ab + exp_batter_earned_fps_by_hand + exp_pitcher_allowed_fps_by_hand + park_adjust + fp_ema + rhythm_score, data = batters_by_game)
summary(lm_batter_full_game)
# Adjusted R-squared:  Adjusted R-squared:  0.1073
preds <- predict(lm_batter_full_game, batters_by_game)
batters_by_game$pred <- preds
batters_by_game %>%
ggplot(aes(x=pred, y=game_fp)) +
geom_point()
teams_by_game <- batters_by_game %>%
merge(batter_team, by = "batter_name") %>%
rename(team = team.x) %>%
group_by(team, game_pk) %>%
summarise(team_fp = sum(game_fp), total_op_fp = sum(op_fp), team_w_av_abs = sum(av_pts_ab), op_w_av_abs = sum(op_av_pts_allow), team_av_per_ab = mean(mbdb), op_av_per_ab = mean(mpdb), park_adjust = mean(park_adjust), park_ag_pitch = sum(park_ag_pitch), sum_preds = sum(pred), mean_woba = median(wOBA), mean_ISO = median(ISO), rhythm_score = mean(rhythm_score), fp_ema = mean(fp_ema), team_abs = sum(at_bats))
teams_by_game$op_allowed_fps_per_ab <- teams_by_game$total_op_fp/teams_by_game$team_abs
lm_team_full_game <- lm(team_fp ~ sum_preds + park_ag_pitch + rhythm_score + fp_ema, data = teams_by_game)
summary(lm_team_full_game)
#Adjusted R-squared:  0.3399
preds <- predict(lm_team_full_game, teams_by_game)
teams_by_game$pred <-preds
teams_by_game %>%
ggplot(aes(x=pred, y=team_fp)) +
geom_point()
### !!! Let's try predicting team FPs next and see if we can get a better adjusted R2 !!! ###
today = Sys.Date()
today = Sys.Date()
home_teams_on_slate <- c("Boston Red Sox", "Los Angeles Dodgers", "Colorado Rockies", "Arizona Diamondbacks", "Seattle Mariners")
todays_game_pks <- as.data.frame(mlb_schedule(season = 2022, level_ids = "1")) %>%
filter(date == today) %>%
select(game_pk, teams_away_team_name, teams_home_team_name)
todays_starters <- as.data.frame(mlb_probables(todays_game_pks$game_pk[1]))
today = Sys.Date()
home_teams_on_slate <- c("Boston Red Sox", "Los Angeles Dodgers", "Colorado Rockies", "Arizona Diamondbacks", "Seattle Mariners")
todays_game_pks <- as.data.frame(mlb_schedule(season = 2024, level_ids = "1")) %>%
filter(date == today) %>%
select(game_pk, teams_away_team_name, teams_home_team_name)
todays_starters <- as.data.frame(mlb_probables(todays_game_pks$game_pk[1]))
for(i in 2:nrow(todays_game_pks)){
temp_row <- mlb_probables(todays_game_pks$game_pk[i])
todays_starters <- dplyr::bind_rows(todays_starters, temp_row)
}
todays_starters <- unique(todays_starters) %>%
rename(pitcher_name = fullName)
todays_starters <-  todays_starters %>%
merge(full_game_pitcher_score, by = "pitcher_name", all.x = TRUE) %>%
filter(!is.na(pitcher_name))
todays_starters <-  todays_starters%>%
merge(season_game_pks, by = "game_pk", all.x = TRUE)
todays_starters <- merge(todays_starters, home_ballpark_stats, by = "teams_home_team_name", all.x = TRUE)
mpdb_for_opp_bats <- at_bat_result %>%
group_by(batting_team) %>%
summarise(mpdb  = mean(mpdb))
team_abs <- at_bat_result %>%
group_by(batting_team) %>%
summarise(n_abs = n())
team_hrs <- at_bat_result %>%
filter(result.event == "Home Run") %>%
group_by(batting_team) %>%
summarise(n_hrs = n())
team_ks <- at_bat_result %>%
filter(result.event == "Strikeout") %>%
group_by(batting_team) %>%
summarise(n_ks = n())
team_abs <- team_abs %>%
merge(team_hrs, by = "batting_team", all.x = TRUE)%>%
merge(team_ks, by = "batting_team", all.x = TRUE)
team_abs$hr_pct <- team_abs$n_hrs / team_abs$n_abs
team_abs$k_pct <- team_abs$n_ks / team_abs$n_abs
team_abs <- team_abs %>%
select(-n_hrs, -n_ks, -n_abs)
todays_starters$batting_team <- case_when(
todays_starters$teams_home_team_name ==  todays_starters$team ~ todays_starters$teams_away_team_name,
todays_starters$teams_away_team_name ==  todays_starters$team ~ todays_starters$teams_home_team_name
)
todays_starters <- merge(todays_starters, mpdb_for_opp_bats, by = "batting_team", all.x = TRUE)
todays_starters$park_adjust <- case_when(
todays_starters$pitchhand == "R" ~ todays_starters$park_av_pitcher_ppab_R,
todays_starters$pitchhand == "L" ~ todays_starters$park_av_pitcher_ppab_L
)
todays_starters$park_ag_bat <- case_when(
todays_starters$pitchhand == "R" ~ todays_starters$park_av_batter_ppab_ag_R,
todays_starters$pitchhand == "L" ~ todays_starters$park_av_batter_ppab_ag_L
)
todays_starters <- todays_starters %>%
merge(pitcher_stats, by = "pitcher_name", all.x= TRUE)
team_bats_for_p_preds <- teams_by_game %>%
group_by(team) %>%
summarise(avg_fps = mean(team_fp), ob_av_pts_ag = mean(op_av_per_ab), b_allowed_fps = mean(op_allowed_fps_per_ab)) %>%
rename(batting_team = team)
todays_starters <- todays_starters %>%
merge(team_bats_for_p_preds, by = "batting_team", all.x = TRUE)
p_earned_fps_df <- pitchers_by_game %>%
group_by(pitcher_name) %>%
summarise(p_earned_fps = mean(p_earned_fps))
todays_starters <- todays_starters %>%
merge(p_earned_fps_df, by = "pitcher_name")
todays_starters <- todays_starters %>%
merge(pitcher_longevity, by = "pitcher_name")
todays_starters <- todays_starters %>%
merge(mad_pitcher_fps, by = "pitcher_name", all.x = TRUE)
todays_starters <- todays_starters %>%
merge(pitcher_longevity, by = "pitcher_name")
todays_starters <- todays_starters%>%
mutate(
bats_L_factors = (2 + mbdpL) * park_av_batter_ppab_L/ 2,
bats_R_factors = (2 + mbdpR) * park_av_batter_ppab_R/ 2,
pitch_L_factors =(2 +  mpdpL) * park_av_pitcher_ppab_L/ 2,
pitch_R_factors = (2 + mpdpR) * park_av_pitcher_ppab_R/ 2
)
# %>%
#   select(pitcher_name, team, batting_team, pitchhand, preds, bats_L_factors, bats_R_factors, pitch_L_factors, pitch_R_factors, mean_batters_faced.y, min_batters_faced.y, max_batters_faced.y)
todays_starters$sum_bat_factors <- todays_starters$bats_L_factors+todays_starters$bats_R_factors
todays_starters$sum_pitch_factors <- todays_starters$pitch_L_factors+todays_starters$pitch_R_factors
todays_starters$mean_projection <- todays_starters$sum_pitch_factors*todays_starters$mean_batters_faced.y
todays_starters$ceiling_projection <- todays_starters$sum_pitch_factors*todays_starters$max_batters_faced.y
#
# tryCatch({
todays_starters <- todays_starters %>%
rename(mean_batters_faced = mean_batters_faced.x)
# })
todays_starters$preds <- predict(lm_pitcher_full_game, todays_starters)
todays_starters <- todays_starters %>%
filter(teams_home_team_name %in% home_teams_on_slate)
ts_hold <- todays_starters
### top half is team batting, bottom half is pitching
todays_starters <- ts_hold
todays_starters$preds <- (10+todays_starters$preds)/2 + 5
rm(batting_teams_merged_stats)
batting_teams_merged_stats <- recent_stats %>%
filter(team %in% todays_starters$batting_team) %>%
select(team, batter_name, bathand, av_pts_ab, mbdbL, mbdbR, fp_ema, big_games, rhythm_score, mad_fps) %>%
rename(batting_team = team) %>%
merge(todays_starters, by = "batting_team") %>%
merge(Rbat_stats, by = "teams_home_team_name") %>%
merge(Lbat_stats, by = "teams_home_team_name")
### top half is team batting, bottom half is pitching
todays_starters <- ts_hold
todays_starters$preds <- (10+todays_starters$preds)/2 + 5
rm(batting_teams_merged_stats)
recent_stats <- batters_by_game %>%
group_by(batter_name) %>%
summarise(game_pk = last(game_pk)) %>%
mutate(ugID = paste(batter_name, game_pk)) %>%
merge(batters_by_game, by = "ugID") %>%
rename(batter_name = batter_name.x) %>%
merge(batter_stats, by = "batter_name")
batting_teams_merged_stats <- recent_stats %>%
filter(team %in% todays_starters$batting_team) %>%
select(team, batter_name, bathand, av_pts_ab, mbdbL, mbdbR, fp_ema, big_games, rhythm_score, mad_fps) %>%
rename(batting_team = team) %>%
merge(todays_starters, by = "batting_team") %>%
merge(Rbat_stats, by = "teams_home_team_name") %>%
merge(Lbat_stats, by = "teams_home_team_name")
batting_teams_merged_stats <-batting_teams_merged_stats %>%
mutate(park_adjust =
case_when(
bathand == "R" ~ batting_teams_merged_stats$park_av_batter_ppab_R.y,
bathand == "L" ~ batting_teams_merged_stats$park_av_batter_ppab_L.y,
bathand == "S" ~ max(batting_teams_merged_stats$park_av_batter_ppab_R.y, batting_teams_merged_stats$park_av_batter_ppab_L.y)
),
exp_batter_earned_fps_by_hand =
case_when(
pitchhand == "R" ~ batting_teams_merged_stats$mbdpR,
pitchhand == "L" ~ batting_teams_merged_stats$mbdpL,
),
exp_pitcher_allowed_fps_by_hand =
case_when(
bathand == "R" ~ batting_teams_merged_stats$mbdpR,
bathand == "L" ~ batting_teams_merged_stats$mbdpL,
bathand == "S" ~ max(batting_teams_merged_stats$mbdpR, batting_teams_merged_stats$mbdpL)
)
)
batting_teams_merged_stats <-batting_teams_merged_stats %>%
merge(mad_batter_fps, by = "batter_name")
preds <- predict(lm_batter_full_game, batting_teams_merged_stats)
batting_teams_merged_stats$pred <- preds
simplified_sum <- batting_teams_merged_stats %>%
select(batting_team, batter_name, pred)
simplified_sum <- simplified_sum %>%
group_by(batting_team) %>%
summarise(adjustment = median(pred))
team_performance <- at_bat_result %>%
group_by(batting_team, game_pk) %>%
summarise(earned_batter_fps = sum(batter_dkfps),  allowed_pitcher_fps = sum(pitcher_dkfps), homers = sum(result.event == "Home Run"), strikeouts = sum(result.event == "Strikeout"))
team_deviation <- team_performance %>%
group_by(batting_team) %>%
summarise(bats_sd = sd(as.numeric(earned_batter_fps), na.rm = TRUE), op_sd = sd(as.numeric(allowed_pitcher_fps), na.rm = TRUE))
team_performance <- team_performance %>%
group_by(batting_team) %>%
summarise(earned_batter_fps = mean(earned_batter_fps), allowed_pitcher_fps = mean(allowed_pitcher_fps), homers = mean(homers), strikeouts = mean(strikeouts)) %>%
merge(simplified_sum, by = "batting_team") %>%
merge(team_deviation, by = "batting_team") %>%
mutate(earned_batter_fps = earned_batter_fps + adjustment)
# %>%
#   filter(batting_team == "Arizona Diamondbacks" |batting_team == "Atlanta Braves" | batting_team == "Baltimore Orioles" | batting_team == "Boston Red Sox"|  batting_team == "Chicago White Sox" |batting_team == "Chicago Cubs" |batting_team == "Cincinnati Reds" |  batting_team == "Detroit Tigers" |batting_team == "Houston Astros"|batting_team == "Kansas City Royals" | batting_team == "Miami Marlins"|batting_team == "Milwaukee Brewers"|batting_team == "Minnesota Twins"|batting_team == "New York Yankees" | batting_team == "Philadelphia Phillies" |batting_team == "Pittsburgh Pirates" |batting_team == "St. Louis Cardinals" |batting_team == "Tampa Bay Rays"|batting_team == "Texas Rangers"|batting_team == "Toronto Blue Jays"|batting_team == "Washington Nationals")
# List of all teams to filter by for analysis
#
# filter(batting_team == "Arizona Diamondbacks" |batting_team == "Atlanta Braves" | batting_team == "Baltimore Orioles" | batting_team == "Boston Red Sox"|  batting_team == "Chicago White Sox" |batting_team == "Chicago Cubs" |batting_team == "Cincinnati Reds" | batting_team == "Cleveland Guardians" | batting_team == "Colorado Rockies"| batting_team == "Detroit Tigers" |batting_team == "Houston Astros"|batting_team == "Kansas City Royals" | batting_team == "Los Angeles Angels" |batting_team == "Los Angeles Dodgers" | batting_team == "Miami Marlins"|batting_team == "Milwaukee Brewers"|batting_team == "Minnesota Twins"|batting_team == "New York Yankees" |batting_team == "New York Mets"|batting_team == "Oakland Athletics"| batting_team == "Philadelphia Phillies" |batting_team == "Pittsburgh Pirates" |batting_team == "San Diego Padres"|batting_team == "San Francisco Giants" | batting_team == "Seattle Mariners" |batting_team == "St. Louis Cardinals" |batting_team == "Tampa Bay Rays"|batting_team == "Texas Rangers"|batting_team == "Toronto Blue Jays"|batting_team == "Washington Nationals")
### simulation of pitching results based on projection and standard deviation; sim_length is number of simulations to run
#
sim_length = 10000
#rm(team_bats_simulation)
team_bats_simulation <- rnorm(sim_length, mean = team_performance$earned_batter_fps[1], sd = team_performance$bats_sd[1])
for(i in 2:length(team_performance$earned_batter_fps)){
practice_vector <- rnorm(sim_length, mean = team_performance$earned_batter_fps[i], sd = team_performance$bats_sd[i])
team_bats_simulation <- cbind(team_bats_simulation, practice_vector)
}
team_vector <- team_performance$batting_team
colnames(team_bats_simulation) <- team_vector
# find ranks
team_sim_rank <- t(apply(-team_bats_simulation, 1, rank))
team_sim_rank <- t(team_sim_rank)
# add to your dates
#pitcher_simulation.rank <- cbind(pitcher_simulation[1], t(apply(-pitcher_simulation, 1, rank)))
rm(ones_vector)
rm(twos_vector)
rm(threes_vector)
ones_vector <- vector("numeric", length(team_vector))
twos_vector <- vector("numeric", length(team_vector))
threes_vector <- vector("numeric", length(team_vector))
for(i in 1:length(team_sim_rank)){
if(i %% length(team_vector) == 0){
if(team_sim_rank[i] == 1){
ones_vector[length(team_vector) ] <- ones_vector[ length(team_vector)] + 1
}
if(team_sim_rank[i] == 2){
twos_vector[length(team_vector) ] <- twos_vector[length(team_vector)] + 1
}
if(team_sim_rank[i] == 3){
threes_vector[length(team_vector) ] <- threes_vector[length(team_vector)] + 1
}
}
else{
if(team_sim_rank[i] == 1){
ones_vector[i %% length(team_vector) ] <- ones_vector[i %% length(team_vector)] + 1
}
if(team_sim_rank[i] == 2){
twos_vector[i %% length(team_vector) ] <- twos_vector[i %% length(team_vector)] + 1
}
if(team_sim_rank[i] == 3){
threes_vector[i %% length(team_vector) ] <- threes_vector[i %% length(team_vector)] + 1
}
}
}
View(team_sim_rank)
length(team_vector)
View(team_sim_rank)
View(team_bats_simulation)
summary(lm_batter_dkfps)
library(baseballr)
library(dplyr)
library(ggplot2)
#library(reshape2) not available: Error in library(reshape2) : there is no package called ‘reshape2’; replacing with tidyr
library(tidyr) #attempting to replace reshape2 based on CRAN suggestion
library(zoo)
library(TTR)
summary(lm_pitcher_full_game)
summary(lm_pitcher_second_level)
today = Sys.Date()
home_teams_on_slate <- c("New York Mets", "Chicago White Sox", "Chicago Cubs", "Houston Astros", "Arizona Diamondbacks", "Oakland Athletics", "Seattle Mariners", "San Diego Padres", "Los Angeles Dodgers")
todays_game_pks <- as.data.frame(mlb_schedule(season = 2024, level_ids = "1")) %>%
filter(date == today) %>%
select(game_pk, teams_away_team_name, teams_home_team_name)
todays_starters <- as.data.frame(mlb_probables(todays_game_pks$game_pk[1]))
for(i in 2:nrow(todays_game_pks)){
temp_row <- mlb_probables(todays_game_pks$game_pk[i])
todays_starters <- dplyr::bind_rows(todays_starters, temp_row)
}
todays_starters <- unique(todays_starters) %>%
rename(pitcher_name = fullName)
todays_starters <-  todays_starters %>%
merge(full_game_pitcher_score, by = "pitcher_name", all.x = TRUE) %>%
filter(!is.na(pitcher_name))
todays_starters <-  todays_starters%>%
merge(season_game_pks, by = "game_pk", all.x = TRUE)
todays_starters <- merge(todays_starters, home_ballpark_stats, by = "teams_home_team_name", all.x = TRUE)
mpdb_for_opp_bats <- at_bat_result %>%
group_by(batting_team) %>%
summarise(mpdb  = mean(mpdb))
team_abs <- at_bat_result %>%
group_by(batting_team) %>%
summarise(n_abs = n())
team_hrs <- at_bat_result %>%
filter(result.event == "Home Run") %>%
group_by(batting_team) %>%
summarise(n_hrs = n())
team_ks <- at_bat_result %>%
filter(result.event == "Strikeout") %>%
group_by(batting_team) %>%
summarise(n_ks = n())
team_abs <- team_abs %>%
merge(team_hrs, by = "batting_team", all.x = TRUE)%>%
merge(team_ks, by = "batting_team", all.x = TRUE)
team_abs$hr_pct <- team_abs$n_hrs / team_abs$n_abs
team_abs$k_pct <- team_abs$n_ks / team_abs$n_abs
team_abs <- team_abs %>%
select(-n_hrs, -n_ks, -n_abs)
todays_starters$batting_team <- case_when(
todays_starters$teams_home_team_name ==  todays_starters$team ~ todays_starters$teams_away_team_name,
todays_starters$teams_away_team_name ==  todays_starters$team ~ todays_starters$teams_home_team_name
)
todays_starters <- merge(todays_starters, mpdb_for_opp_bats, by = "batting_team", all.x = TRUE)
todays_starters$park_adjust <- case_when(
todays_starters$pitchhand == "R" ~ todays_starters$park_av_pitcher_ppab_R,
todays_starters$pitchhand == "L" ~ todays_starters$park_av_pitcher_ppab_L
)
todays_starters$park_ag_bat <- case_when(
todays_starters$pitchhand == "R" ~ todays_starters$park_av_batter_ppab_ag_R,
todays_starters$pitchhand == "L" ~ todays_starters$park_av_batter_ppab_ag_L
)
todays_starters <- todays_starters %>%
merge(pitcher_stats, by = "pitcher_name", all.x= TRUE)
team_bats_for_p_preds <- teams_by_game %>%
group_by(team) %>%
summarise(avg_fps = mean(team_fp), ob_av_pts_ag = mean(op_av_per_ab), b_allowed_fps = mean(op_allowed_fps_per_ab)) %>%
rename(batting_team = team)
todays_starters <- todays_starters %>%
merge(team_bats_for_p_preds, by = "batting_team", all.x = TRUE)
p_earned_fps_df <- pitchers_by_game %>%
group_by(pitcher_name) %>%
summarise(p_earned_fps = mean(p_earned_fps))
todays_starters <- todays_starters %>%
merge(p_earned_fps_df, by = "pitcher_name")
todays_starters <- todays_starters %>%
merge(pitcher_longevity, by = "pitcher_name")
todays_starters <- todays_starters %>%
merge(mad_pitcher_fps, by = "pitcher_name", all.x = TRUE)
todays_starters <- todays_starters %>%
merge(pitcher_longevity, by = "pitcher_name")
todays_starters <- todays_starters%>%
mutate(
bats_L_factors = (2 + mbdpL) * park_av_batter_ppab_L/ 2,
bats_R_factors = (2 + mbdpR) * park_av_batter_ppab_R/ 2,
pitch_L_factors =(2 +  mpdpL) * park_av_pitcher_ppab_L/ 2,
pitch_R_factors = (2 + mpdpR) * park_av_pitcher_ppab_R/ 2
)
# %>%
#   select(pitcher_name, team, batting_team, pitchhand, preds, bats_L_factors, bats_R_factors, pitch_L_factors, pitch_R_factors, mean_batters_faced.y, min_batters_faced.y, max_batters_faced.y)
todays_starters$sum_bat_factors <- todays_starters$bats_L_factors+todays_starters$bats_R_factors
todays_starters$sum_pitch_factors <- todays_starters$pitch_L_factors+todays_starters$pitch_R_factors
todays_starters$mean_projection <- todays_starters$sum_pitch_factors*todays_starters$mean_batters_faced.y
todays_starters$ceiling_projection <- todays_starters$sum_pitch_factors*todays_starters$max_batters_faced.y
#
# tryCatch({
todays_starters <- todays_starters %>%
rename(mean_batters_faced = mean_batters_faced.x)
# })
todays_starters$preds <- predict(lm_pitcher_full_game, todays_starters)
todays_starters <- todays_starters %>%
filter(teams_home_team_name %in% home_teams_on_slate)
ts_hold <- todays_starters
View(ts_hold)
rm(ytd_at_bat_result)
start_date = "2024-03-28"
end_date = "2024-04-02"
## Get all stats between start and end dates
batter_stats <- bref_daily_batter(start_date, end_date) %>%
rename(batter_name = Name)
pitcher_stats <- daily_pitcher_bref(start_date, end_date) %>%
rename(pitcher_name = Name)
# Treat start/end dates as Date type for purpose of loop
loop_start <- as.Date(start_date, format="%Y-%m-%d")
loop_end <- as.Date(end_date, format="%Y-%m-%d")
## Get all play-by-play data on a particular date range; currently filtering for last pitch of at-bat only
day_to_analyze = loop_start
game_pks_on_date <- as.data.frame(mlb_game_pks(day_to_analyze))
all_events_on_date <- mlb_pbp(game_pks_on_date$game_pk[1])%>%
filter(last.pitch.of.ab == "true")
while(loop_start <= loop_end){
day_to_analyze = loop_start
game_pks_on_date <- as.data.frame(mlb_game_pks(day_to_analyze)) %>%
filter(!is.na(isTie))
if(loop_start != as.Date(start_date, format="%Y-%m-%d")){
temp <- mlb_pbp(game_pks_on_date$game_pk[1])%>%
filter(last.pitch.of.ab == "true")
}
else{
temp <- all_events_on_date
}
for(i in 2:length(game_pks_on_date$game_pk)){
game_pbp <- mlb_pbp(game_pks_on_date$game_pk[i])
temp <- dplyr::bind_rows(temp, game_pbp)
}
all_events_on_date <- dplyr::bind_rows(all_events_on_date, temp)
loop_start <- loop_start+1
}
view(ytd_at_bat_result)
ytd_at_bat_result <- at_bat_result
library(baseballr)
library(dplyr)
library(ggplot2)
#library(reshape2) not available: Error in library(reshape2) : there is no package called ‘reshape2’; replacing with tidyr
library(tidyr) #attempting to replace reshape2 based on CRAN suggestion
library(zoo)
library(TTR)
start_date = "2024-03-28"
end_date = "2024-04-02"
## Get all stats between start and end dates
batter_stats <- bref_daily_batter(start_date, end_date) %>%
rename(batter_name = Name)
pitcher_stats <- daily_pitcher_bref(start_date, end_date) %>%
rename(pitcher_name = Name)
# Treat start/end dates as Date type for purpose of loop
loop_start <- as.Date(start_date, format="%Y-%m-%d")
loop_end <- as.Date(end_date, format="%Y-%m-%d")
## Get all play-by-play data on a particular date range; currently filtering for last pitch of at-bat only
day_to_analyze = loop_start
game_pks_on_date <- as.data.frame(mlb_game_pks(day_to_analyze))
all_events_on_date <- mlb_pbp(game_pks_on_date$game_pk[1])%>%
filter(last.pitch.of.ab == "true")
while(loop_start <= loop_end){
day_to_analyze = loop_start
game_pks_on_date <- as.data.frame(mlb_game_pks(day_to_analyze)) %>%
filter(!is.na(isTie))
if(loop_start != as.Date(start_date, format="%Y-%m-%d")){
temp <- mlb_pbp(game_pks_on_date$game_pk[1])%>%
filter(last.pitch.of.ab == "true")
}
else{
temp <- all_events_on_date
}
for(i in 2:length(game_pks_on_date$game_pk)){
game_pbp <- mlb_pbp(game_pks_on_date$game_pk[i])
temp <- dplyr::bind_rows(temp, game_pbp)
}
all_events_on_date <- dplyr::bind_rows(all_events_on_date, temp)
loop_start <- loop_start+1
}
## Get home and away team info for each game_pk
season_game_pks <- as.data.frame(mlb_schedule(season = 2024, level_ids = "1")) %>%
select(game_pk, teams_away_team_name, teams_home_team_name)
###  !!!! start here to recreate at_bat_results from the completed loop. Start at the top if you want to create a new date range to analyze !!!!
at_bat_result <- all_events_on_date
ytd_at_bat_result <- dplyr::bind_rows(ytd_at_bat_result, at_bat_result)
all_events_on_date <- ytd_at_bat_result
